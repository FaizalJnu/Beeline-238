.. _beeline:
   

Beeline
=======

Overview
--------

BEELINE provides a set of tools for evaluating methods that infer gene
regulatory networks (GRN) from single-cell gene expression
data. The BEELINE framework is divided into the following modules:

* :ref:`blrun` : contains the BEELINE's Runner module, a Python
  wrapper for 12 GRN inference algorithms with options to add new
  methods.
* :ref:`bleval` : contains the BEELINE's Evaluation module that
  provides easy-to-use tools for evaluating GRN reconstructions.
* :ref:`blplot` : contains the BEELINE's plotting module for
  visualizing output from BLEval.



Getting Started
---------------

The BEELINE pipeline interfaces with the implementations of various
algorithms through Docker containers.  Please follow this tutorial on
how to `install docker
<https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04>`_
on Ubuntu 18.0.



.. tip:: Setup docker to run docker without sudo using the following shell command

   .. code:: sh

                   sudo usermod -aG docker $USER

   See more details `here <https://askubuntu.com/questions/477551/how-can-i-use-docker-without-sudo>`_.

Once docker has been set up correctly, the next step is to create the
docker containers for each of the algorithms.  The script
`initialize.sh` builds these containers. Run the following in the
terminal

.. code:: bash

          . initialize.sh
          
.. note:: This step will take a while!

   
To compute ranked list of edges, run

.. code:: python

          python BLStart.py --config config-files/config.yaml
    
To compute areas under the ROC and PR curves using the BEELINE's
evaluation pipeline, run

.. code:: bash

          python BLEvalAggregator.py --config config-files/config.yaml --auc

To display the complete list of
evaluation options, run

.. code:: bash
          
          python BLEvalAggregator.py --help

Tutorial
--------

This tutorial will first explain the structure of the Beeline repository,
with a walkthrough of the different components that the user can customize.


Project outline
###############

The BEELINE repository is structured as follows:

.. code:: text

          Beeline
          |-- inputs/
          |   `-- examples/
          |       `-- GSD/
          |           |--refNetwork.csv
          |           |--PseudoTime.csv
          |           `--ExpressionData.csv
          |-- config-files/
          |   `-- config.yaml
          |-- BLRun/
          |   |-- sinceritiesRunner.py
          |   `-- ...
          |-- BLPlot/
          |   |-- NetworkMotifs.py  
          |   `-- CuratedOverview.py
          |-- BLEval/
          |   |-- parseTime.py
          |    `-- ...
          `-- Algorithms/
              `-- SINCERITIES/

Input files
***********

The sample input data set provided is generated by :ref:`BoolODE`
using the Boolean model of `Gonadal Sex Determination
<https://www.ncbi.nlm.nih.gov/pubmed/26573569>`_ as input.  Note that
this dataset has been pre-processed to produce three files that are
required in the BEELINE pipline. 

1. `ExpressionData.csv` contains the RNAseq data, with genes as
   rows and cell IDs as columns. This file is a required input to the
   pipline
2. `PseudoTime.csv` contains the pseudotime values for the cells in
   `ExpressionData.csv`.  We recommend using the Slingshot method to
   obtain the pseudotime for a dataset. Many algorithms in the
   pipeline require a pseudotime file as input.
3. `refNetwork.csv` contains the ground truth network underlying the
   interactions between genes in `ExpressionData.csv`. Typically this
   network is not available, and will have to be curated from various
   Transcription Factor databases. While this file is not a
   requirement to run the base pipeline, a reference network is
   required to run some of the performance evaluations in
   :ref:`BLEval`.


The figure below shows the t-SNE visualization of the expression
data from the example dataset. 

.. image:: figs/SlingshotOutputVis.png

This dataset shows a bifurcating
trajectory, as is evidenced by the part (a) of the figure, where
each 'cell' is colored by the timepoint at which it was sampled
in the simulation (the darker colors indicate earlier time points).
Clustering the simulation confirms the two trajectories, indicated
in red and blue respectively in part (b). Finally, running Slingshot
on this dataset and specifying the cluster of cells corresponding to
the early time points yields two pseudotime trajectories, shown in part (c).
           

.. attention:: Please ensure that any input dataset you create is
               comma separated, and contains the correct style of
               column names.


Config files
************

Beeline uses `YAML <https://yaml.org/>`_ files to allow users to
flexibly specify inputs and algorithm run parameters. A sample config file is
provided in `config-files/`. A config file should contain at minimum

.. code:: text

          input_settings:
              datasets:
                  - name: "Dataset name"
                    exprData: "Expression Data filename"
                    cellData: "PseudoTime filename"
                    trueEdges: "Ground truth network filename"

              algorithms:
                  - name: "Algorithm name"
                    params:
                        # Any other parameters that can be passed to
                        # this algorithm
                        should_run: [True] # or False
               

Apart from indicating the path to the base directory and the specific
folder containing the input, the config file indicates which
algorithms should be run, along with the parameters to be passed to
the algorithms, if any. For a list of parameters that the pipeline
currently passes to the algorithms, see :ref:`Algorithms`.  Finally,
the YAML file also specifies the paths to the outputs.

.. attention:: Please ensure that the YAML file is correctly indented!

Running the pipeline
********************

Once the input dataset has been generated and the config file has been created,
the pipeline can be executed by simply calling  :ref:`BLStart` on


.. toctree::
   :maxdepth: 2
   :caption: Reference

   algorithms
   beeline-reference


